{"version":3,"sources":["TodoForm.js","TodoItem.js","TodoList.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["Todo","id","title","completed","this","TodoForm","props","onChangeTitle","e","setState","target","value","onSubmit","preventDefault","newTodo","Math","floor","random","state","addTodo","Container","Box","m","TextField","label","onChange","React","Component","TodoItem","className","ListItem","FormControlLabel","control","Checkbox","style","cursor","checked","updateTodo","ListItemText","baseStyle","fontFamily","fontWeight","textDecoration","getStyle","Fab","color","aria-label","size","onClick","deleteTodo","TodoList","console","log","todos","map","todo","List","key","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","Header","classes","AppBar","position","Toolbar","Typography","variant","App","push","newTodos","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ad0357a.chunk.js","sourcesContent":["import React from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Box from \"@material-ui/core/Box\";\n\nimport TextField from \"@material-ui/core/TextField\";\n\nclass Todo {\n  constructor(id, title, completed = false) {\n    this.id = id;\n    this.title = title;\n    this.completed = completed;\n  }\n}\n\nclass TodoForm extends React.Component {\n  //   function onSubmit(e) {\n  //     e.preventDEfault();\n  //     console.log(\"submit --\");\n  //   }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"\"\n    };\n  }\n\n  onChangeTitle = e => {\n    this.setState({\n      title: e.target.value\n    });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n\n    const newTodo = new Todo(Math.floor(Math.random() * 100), this.state.title);\n\n    this.props.addTodo(newTodo);\n    this.setState({\n      title: \"\"\n    });\n  };\n\n  render() {\n    return (\n      <Container>\n        <Box m={2}>\n          <form onSubmit={this.onSubmit}>\n            <TextField\n              id=\"standard-basic\"\n              label=\"Enter Todo\"\n              value={this.state.title}\n              onChange={this.onChangeTitle}\n            />\n          </form>\n        </Box>\n      </Container>\n    );\n  }\n}\n\nexport default TodoForm;\n","import React from \"react\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Fab from \"@material-ui/core/Fab\";\nimport DelIcon from \"@material-ui/icons/Delete\";\nimport Box from \"@material-ui/core/Box\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nfunction TodoItem(props) {\n  function getStyle(completed) {\n    const baseStyle = {\n      fontFamily: \"Shadows Into Light Two, cursive\",\n      fontWeight: \"bold\"\n    };\n    if (completed) {\n      return {\n        textDecoration: \"line-through\",\n        ...baseStyle\n      };\n    } else {\n      return {\n        textDecoration: \"none\",\n        ...baseStyle\n      };\n    }\n  }\n\n  return (\n    <div className=\"todoItem\">\n      <ListItem>\n        <Box>\n          <FormControlLabel\n            control={\n              <Checkbox\n                style={{ cursor: \"pointer\" }}\n                checked={props.completed ? true : false}\n                onChange={e => {\n                  props.updateTodo(props.id);\n                }}\n                value=\"\"\n              />\n            }\n          />\n          {/* <input\n          type=\"checkbox\"\n          checked={props.completed ? true : false}\n          onChange={e => {\n            props.updateTodo(props.id);\n          }}\n        /> */}\n        </Box>\n        <ListItemText>\n          <span style={getStyle(props.completed)}>{props.title}</span>{\" \"}\n        </ListItemText>\n\n        <Box>\n          <Fab\n            color=\"secondary\"\n            aria-label=\"edit\"\n            size=\"small\"\n            onClick={() => props.deleteTodo(props.id)}\n          >\n            <DelIcon style={{ cursor: \"pointer\" }} />\n          </Fab>\n          {/* <button onClick={() => props.deleteTodo(props.id)}>delete</button> */}\n        </Box>\n      </ListItem>\n    </div>\n  );\n}\n\nexport default TodoItem;\n","import React from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport List from \"@material-ui/core/List\";\nfunction TodoList(props) {\n  console.log(props);\n  return (\n    <div>\n      {props.todos.map(todo => (\n        <List>\n          <TodoItem\n            key={todo.id}\n            title={todo.title}\n            completed={todo.completed}\n            updateTodo={props.updateTodo}\n            id={todo.id}\n            deleteTodo={props.deleteTodo}\n          />\n        </List>\n      ))}\n    </div>\n  );\n}\n\nexport default TodoList;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\n\nexport default function Header() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          {/* <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <MenuIcon />\n          </IconButton> */}\n          <Typography variant=\"h6\" className={classes.title}>\n            Todo List App\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\n\nimport TodoForm from \"./TodoForm\";\nimport TodoList from \"./TodoList\";\nimport Header from \"./Header\";\nimport Container from \"@material-ui/core/Container\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [\n        {\n          id: 1,\n          title: \"Learn React\",\n          completed: false\n        },\n        {\n          id: 2,\n          title: \"Learn .net\",\n          completed: true\n        },\n        {\n          id: 3,\n          title: \"Learn D365\",\n          completed: false\n        }\n      ]\n    };\n  }\n\n  addTodo = todo => {\n    console.log(todo);\n\n    let todos = this.state.todos;\n\n    todos.push(todo);\n    this.setState({\n      todos\n    });\n  };\n\n  updateTodo = id => {\n    // this.setState({});\n    console.log(\"id \", id);\n\n    let todos = this.state.todos;\n    let newTodos = todos.map(todo => {\n      if (id === todo.id) {\n        return {\n          id: todo.id,\n          completed: !todo.completed,\n          title: todo.title\n        };\n      } else {\n        return todo;\n      }\n    });\n\n    console.log(\"newToddos - \", newTodos);\n\n    this.setState({\n      todos: newTodos\n    });\n  };\n\n  deleteTodo = id => {\n    console.log(\"id is --\", id);\n    this.setState({\n      todos: [...this.state.todos.filter(todo => todo.id !== id)]\n    });\n  };\n\n  render() {\n    return (\n      <Container>\n        <Header />\n        <TodoForm addTodo={this.addTodo} />\n        <TodoList\n          todos={this.state.todos}\n          updateTodo={this.updateTodo}\n          deleteTodo={this.deleteTodo}\n        />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}